// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/token": {
          "post": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "company",
                "in": "header",
                "description": "get token",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                },
                "headers": {
                  "Access-Control-Allow-Origin": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "/dsf/calculator/allTenors": {
          "post": {
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "name": "applicationName",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "in": "body",
                "name": "Empty",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/calculator/perTenor": {
          "post": {
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "name": "applicationName",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "in": "body",
                "name": "Empty",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/metadata/additionalInsurance": {
          "get": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/metadata/assetCode": {
          "post": {
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "name": "applicationName",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "in": "body",
                "name": "Empty",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/metadata/branchID": {
          "get": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/metadata/brands": {
          "get": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "name": "keyword",
                "in": "query",
                "required": false,
                "type": "string"
              },
              {
                "name": "limit",
                "in": "query",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/metadata/carConditions": {
          "get": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/metadata/cities": {
          "get": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "name": "limit",
                "in": "query",
                "required": false,
                "type": "string"
              },
              {
                "name": "search",
                "in": "query",
                "required": false,
                "type": "string"
              },
              {
                "name": "province_code",
                "in": "query",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/metadata/insuranceTypes": {
          "get": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/metadata/insurances": {
          "get": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "name": "DsfBranchId",
                "in": "query",
                "required": true,
                "type": "string"
              },
              {
                "name": "VehicleCategory",
                "in": "query",
                "required": true,
                "type": "string"
              },
              {
                "name": "InsuranceTypeCode",
                "in": "query",
                "required": true,
                "type": "string"
              },
              {
                "name": "CarCondition",
                "in": "query",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/metadata/models": {
          "get": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "name": "brand",
                "in": "query",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/metadata/packageNames": {
          "get": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "name": "carCondition",
                "in": "query",
                "required": false,
                "type": "string"
              },
              {
                "name": "AssetCode",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "name": "applicationName",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "name": "BranchCode",
                "in": "header",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/metadata/packages": {
          "post": {
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "name": "applicationName",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "in": "body",
                "name": "Empty",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/metadata/paymentTypes": {
          "get": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/metadata/provinces": {
          "get": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "name": "limit",
                "in": "query",
                "required": false,
                "type": "string"
              },
              {
                "name": "search",
                "in": "query",
                "required": false,
                "type": "string"
              },
              {
                "name": "offset",
                "in": "query",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/metadata/variant": {
          "get": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "name": "applicationName",
                "in": "header",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/metadata/vehicleCategory": {
          "get": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/tradein/prediction": {
          "post": {
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "in": "body",
                "name": "Empty",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/tradein/regions": {
          "get": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "name": "province",
                "in": "query",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/dsf/tradein/vehicles": {
          "get": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "name": "model",
                "in": "query",
                "required": false,
                "type": "string"
              },
              {
                "name": "brand",
                "in": "query",
                "required": false,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/mmksi/getData": {
          "post": {
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "in": "body",
                "name": "Empty",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/mmksi/vehicle": {
          "post": {
            "consumes": [
              "application/json"
            ],
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "Auth",
                "in": "header",
                "required": true,
                "type": "string"
              },
              {
                "in": "body",
                "name": "Empty",
                "required": true,
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        },
        "/token/refresh": {
          "post": {
            "produces": [
              "application/json"
            ],
            "parameters": [
              {
                "name": "refreshToken",
                "in": "header",
                "required": true,
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "200 response",
                "schema": {
                  "$ref": "#/definitions/Empty"
                }
              }
            }
          }
        }
      },
      "definitions": {
        "Empty": {
          "type": "object",
          "title": "Empty Schema"
        }
      }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
